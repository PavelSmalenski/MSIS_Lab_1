BASE_PATH=$(cd $(dirname $0) ; pwd -P)
PATH="$BASE_PATH/tools:$PATH"
INSTALL_PREFIX="$HOME/.mupel"

export BASE_PATH

. $BASE_PATH/tools/tool_functions
. $BASE_PATH/tools/tool_install.include

if [ -f "$HOME/.config/user-dirs.dirs" ];then
{
  . "$HOME/.config/user-dirs.dirs"
  DESKTOP_DIR="$XDG_DESKTOP_DIR"
  DOWNLOAD_DIR="$XDG_DOWNLOAD_DIR"
  TEMPLATES_DIR="$XDG_TEMPLATES_DIR"
  PUBLICSHARE_DIR="$XDG_PUBLICSHARE_DIR"
  DOCUMENTS_DIR="$XDG_DOCUMENTS_DIR"
  MUSIC_DIR="$XDG_MUSIC_DIR"
  PICTURES_DIR="$XDG_PICTURES_DIR"
  VIDEOS_DIR="$XDG_VIDEOS_DIR"
}
else
{
  DESKTOP_DIR=$HOME
} fi

DEFAULT_MIN_HD_SIZE=200
DEFAULT_MIN_MEM_SIZE=4096

main_msg=
def exit_build
{
  local ret=$1
  if [[ $ret != 0 ]];then
    touch $BASE_PATH/build/global_mupel_install_failed;fi
  rm -f $BASE_PATH/build/global_mupel_install
  rm -rf $TEMP_DIR
  exit $ret
}

def usage
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--main-msg    Filepointer to send creation information"
  echo "--info        Shows the information dialog"
  echo "--help        this help message"
  echo "Script will prompt interactively for other values."
  exit 1
}

def process_opts
{
  while test "$1" != "" ; do
    case "$1" in
      --main-msg)
        case "$2" in
            "")
              echo "Option main-msg, no argument" > /dev/stderr
              shift
              ;;
            *)
              main_msg="$2"
              shift
              ;;
        esac ;;
      --info)                   showSystemInfoDialog "Multi platform build environment for Kodi on Linux"
                                exit 0;;
      --help)                   usage;;
      *)
        echo "invalid command-line option: $OPTARG"
        usage
        ;;
    esac
    shift
  done
}

##
# Create chroot build environment
# $1 Used bit system (32 or 64)
# $2 System names x86-32bit, x64-64bit or arm7
#
def create_chroot_build_environment
{
  local env_install_ubuntu
  local force_sel=0
  local ret
  local inhibit_install=0

  if [[ $inhibit_install == 0 ]];then
  {
    while :; do
    {
      if [ ! -f $BASE_PATH/tools/linux/install-systembuild-linux ] || [ $force_sel = 1 ];then
      {
        ret=0;
        if [ $force_sel = 0 ];then
        {
          showQuestionDialog "\Needed creation script for Linux x86 system not found. Do you want to select script?";
          ret=$?;
        } fi
        if [[ $ret != 0 ]];then
        {
          evaluate_ret_error $ret "Installation canceled!";
        }
        else
        {
          while :; do
          {
            env_install_ubuntu=$(showdialog --title="Select creation script for access to make distribution \
                                            --file --file-filter="install-systembuild-linux *.install *.sh \
                                            --width=700 --height=480 2> /dev/null);
            if [ $? != 0 ];then
            {
              showWarningDialog_YesNo "Selection of Linux creation script failed! \n\nTry again?" 2> /dev/null;
              [ $? != 0 ] && exit_build 1;
            }
            else
            {
              break;
            } fi
          } done
        } fi
      }
      else
        env_install_ubuntu="$BASE_PATH/tools/linux/install-systembuild-linux";fi

      bash "$env_install_ubuntu" -u -s;
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "Installation of Linux build environment failed! \n\nTry again (you becomes asked about used script)?";
        [ $? != 0 ] && exit_build 1;
        force_sel=1;
      }
      else
        break;fi
    } done
  } fi
}

##
# Create chroot build environment for raspberry PI
# $1 Used bit system (32 or 64)
# $2 System names x86-32bit, x64-64bit or arm7
#
def create_chroot_build_environment_arm
{
  local target=$1
  local system=$2
  local env_install_raspberry
  local force_sel=0
  local ret
  local inhibit_install=0

  if [ -f /usr/local/bin/raspberry ];then
  {
    showQuestionDialog "\
\"/usr/local/bin/raspberry\" command present and system
seems to be already installed.
Do you want to to change or install again?"
    inhibit_install=$?
  } fi

  if [[ $inhibit_install == 0 ]];then
  {
    while :; do
    {
      if [ ! -f $BASE_PATH/tools/raspberry/install-systembuild-raspberry ] || [ $force_sel = 1 ];then
      {
        ret=0
        if [ $force_sel = 0 ];then
        {
          showQuestionDialog "\Needed creation script for Linux ARM system.
Do you want to select script?"
          ret=$?;
        } fi
        if [[ $ret != 0 ]];then
        {
          evaluate_ret_error $ret "Installation canceled!"
        }
        else
        {
          while :; do
          {
            env_install_raspberry=$(showdialog --title="Select creation script for access to Raspberry PI system over chroot" \
                                               --file --file-filter="install-systembuild-raspberry *.install *.sh" \
                                               --width=700 --height=480 2> /dev/null)
            if [ $? != 0 ];then
            {
              showWarningDialog_YesNo "Selection of Linux creation script failed! \n\nTry again?";
              [ $? != 0 ] && exit_build 1;
            }
            else
              break;fi
          } done
        } fi
      }
      else
        env_install_raspberry="$BASE_PATH/tools/raspberry/install-systembuild-raspberry";fi

      showInfoDialog "Start creation of chroot system for Raspberry on\n(follow related requests of them)" 3;
      bash "$env_install_raspberry" -f -l $main_msg;
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "\Installation of Linux build environment failed!Try again (you becomes asked about used script)?";
        [ $? != 0 ] && exit_build 1;
        force_sel=1;
      }
      else
        break;fi
    } done
  } fi

#TODO: Build depends to add
}

def handleSkipPresent
{
  local present=$1;
  local name=$2;

  if [[ $present = TRUE ]] && [[ $SKIP_PRESENT = TRUE ]];then
  {
    showQuestionDialog "<b>System '$name' already present, due you want to install again?</b>";
    ret=$?
    echo $ret
    return $ret;
  } fi
  echo 0;
  return 0;
}


DIST=`grep DISTRIB_ID /etc/*-release | awk -F '=' '{print $2}'`
[[ $DIST != "Ubuntu" ]] && [[ $DIST != "Debian" ]] && {
  printf "${RED}${BRIGHT}Build not possible, need performed on ubuntu or debian based system (needed for install of dependencies parts)! ${NORMAL}\n" > /dev/stderr
  exit 1 ;
}

# Check that xserver is running and user is root.
[[ $DISPLAY ]] || {
  printf "${RED}${BRIGHT}There is no xserver running. Exiting...${NORMAL}\n";
  exit 1;
}

if [[ `uname -m` = "x86_64" ]];then
{
  SYSTEM_BITS=64;
}
elif [[ `uname -m` = "i686" ]];then
{
  printf "${YELLOW}${BRIGHT}Old system, on a 32 bit linux OS is only be build on itself possible! ${NORMAL}\n";
  SYSTEM_BITS=32;
}
else
{
  printf "${RED}${BRIGHT}Wrong system, a 64 bit linux OS is needed! ${NORMAL}\n";
  exit 1;
} fi

# Check that we are running as a regular user
[ "$(id -nu)" = root ] && {
  printf "${RED}${BRIGHT}Run this script as a regular user and provide your \"sudo\" password if requested! ${NORMAL}\n" > /dev/stderr
  exit 1;
}

process_opts "$@";

TEMP_DIR=`mktemp -d`;
main_msg_tmp=${TEMP_DIR}/install_tmp.log;
[ ! -d "$BASE_PATH/build" ] && mkdir $BASE_PATH/build;
[ -z $main_msg ] && main_msg=${TEMP_DIR}/install.log;
build_log=$BASE_PATH/build/install.log;
touch $build_log

if [ -f "$INSTALL_PREFIX/mupel.conf" ];then
  . "$INSTALL_PREFIX/mupel.conf";fi

if [ ! -f "$BASE_PATH/versions" ];then
{
  showErrorDialog "\
The needed CEF binary version file for Kodi is not present and normally included in Mupel package!";fi

MUPEL_VERSION="0.0.1"
INSTALL_PREFIX=${INSTALL_PREFIX:-$HOME/.mupel}

USE_LINUX_X86_32=${USE_LINUX_X86_32:-TRUE}
USE_LINUX_X86_64=${USE_LINUX_X86_64:-TRUE}
USE_LINUX_X86_DISTR=${USE_LINUX_X86_DISTR:-vivid}
USE_LINUX_RPBI=${USE_LINUX_RPBI:-TRUE}
USE_MS_WINDOWS_32=${USE_MS_WINDOWS_32:-TRUE}
USE_MS_WINDOWS_64=${USE_MS_WINDOWS_64:-TRUE}
USE_MAC_OS_X_64=${USE_MAC_OS_X_64:-TRUE}
USE_ANDROID_ARM=${USE_ANDROID_ARM:-TRUE}
USE_ANDROID_X86=${USE_ANDROID_X86:-TRUE}
USE_IOS=${USE_IOS:-TRUE}

LINUX_X86_32_INSTALLED=${LINUX_X86_32_INSTALLED:-FALSE}
LINUX_X86_64_INSTALLED=${LINUX_X86_64_INSTALLED:-FALSE}
LINUX_RPBI_INSTALLED=${LINUX_RPBI_INSTALLED:-FALSE}
MS_WINDOWS_32_INSTALLED=${MS_WINDOWS_32_INSTALLED:-FALSE}
MS_WINDOWS_64_INSTALLED=${MS_WINDOWS_64_INSTALLED:-FALSE}
MAC_OS_X_64_INSTALLED=${MAC_OS_X_64_INSTALLED:-FALSE}
ANDROID_ARM_INSTALLED=${ANDROID_ARM_INSTALLED:-FALSE}
ANDROID_X86_INSTALLED=${ANDROID_X86_INSTALLED:-FALSE}
IOS_INSTALLED=${IOS_INSTALLED:-FALSE}

EMU_INSTALL_PREFIX=${EMU_INSTALL_PREFIX:-$INSTALL_PREFIX/systems}

RELEASE_BUILD=${RELEASE_BUILD:-TRUE}
DEBUG_BUILD=${DEBUG_BUILD:-FALSE}
SYSTEM_BITS=${SYSTEM_BITS:-64}

KODI_SOURCE_URL=${KODI_SOURCE_URL:-$KODI_SOURCE_DEFAULT_URL_BASE}
KODI_SOURCE_URL_INACTIVE=$KODI_SOURCE_URL_INACTIVE
KODI_SOURCE_USE_BASE=${KODI_SOURCE_USE_BASE:-FALSE}
KODI_SOURCE_BRANCH=${KODI_SOURCE_BRANCH:-master}
KODI_SEL_ADDON=$KODI_SEL_ADDON
KODI_RUN_TESTS=${KODI_RUN_TESTS:-FALSE}
KODI_CONF_IN_DIRECT_BUILD=${KODI_CONF_IN_DIRECT_BUILD:-FALSE}
KODI_DEP_CLEAN=${KODI_DEP_CLEAN:-FALSE}
KODI_FORCE_ADDON_CONFIGURE=${KODI_FORCE_ADDON_CONFIGURE:-FALSE}

CEF_SOURCE_URL=${CEF_SOURCE_URL:-$CEF_SOURCE_DEFAULT_URL}
CEF_SOURCE_URL_INACTIVE=$CEF_SOURCE_URL_INACTIVE
CEF_SOURCE_USE_BASE=${CEF_SOURCE_USE_BASE:-FALSE}
CEF_SOURCE_BRANCH=${CEF_SOURCE_BRANCH:-$CEF_SOURCE_DEFAULT_SOURCE_BRANCH}
CEF_DEBUG=${CEF_DEBUG:-FALSE}
CEF_FORCE_UPDATE=${CEF_FORCE_UPDATE:-FALSE}
CEF_NO_UPDATE=${CEF_NO_UPDATE:-FALSE}
CEF_FORCE_CONFIG=${CEF_FORCE_CONFIG:-FALSE}
CEF_FORCE_CLEAN=${CEF_FORCE_CLEAN:-FALSE}
CEF_FORCE_CLEAN_DEPS=${CEF_FORCE_CLEAN_DEPS:-FALSE}
CEF_BUILD_TESTS=${CEF_BUILD_TESTS:-FALSE}
CEF_VERBOSE_BUILD=${CEF_VERBOSE_BUILD:-FALSE}
DEPOT_TOOLS_URL=${DEPOT_TOOLS_URL:-$DEPOT_TOOLS_DEFAULT_URL}

INCLUDE_KODI=${INCLUDE_KODI:-TRUE}
INCLUDE_KODI_ADDONS=${INCLUDE_KODI_ADDONS:-FALSE}
INCLUDE_CEF=${INCLUDE_CEF:-FALSE}
INCLUDE_USER_SCRIPT=${INCLUDE_USER_SCRIPT:-FALSE}
SUPPORT_CEF=${SUPPORT_CEF:-TRUE}
DISABLE_GIT_UPDATE=${DISABLE_GIT_UPDATE:-FALSE}

ADD_PATHS=${ADD_PATHS:-$BASE_PATH/build/depot_tools}

LINUX_BUILD_TYPE=${LINUX_BUILD_TYPE:-x86_64}

TEXT_VIEVER=${TEXT_VIEVER:-gedit}

FREE_INITIAL_DISK_SPACE=`df  . | tail -1 | tr -s ' ' | cut -d' ' -f4`

CPU_PROC_JOBS=${CPU_PROC_JOBS:-8}

###
# Check for missing packages
#
which gksudo >/dev/null
[ "$?" = "0" ] && graphsudo=gksudo;
which kdesudo >/dev/null
[ "$?" = "0" ] && graphsudo=kdesudo;

if [ -z $graphsudo ];then
{
  [ ! -f /etc/kde4rc ] && graphsudo=gksudo && xterm -T "Graphics sudo install '$graphsudo'" -bg black -fg white -e sudo apt-get install gksu ||
                                              xterm -T "Graphics sudo install '$graphsudo'" -bg black -fg white -e sudo apt-get install kdesudo
} fi

which $graphsudo >/dev/null
if [ "$?" != "0" ];then
{
  echo "FATAL: No usable sudo GUI interface present!";
  exit 1;
} fi

which xterm >/dev/null;
[ "$?" != "0" ] && $graphsudo -- apt-get -y install xterm;

packages=""
ldconfig -p | grep -q libwebkitgtk-1.0;
[ "$?" != "0" ] && packages="$packages libwebkitgtk-1.0";
ldconfig -p | grep -q libvte.so.;
[ "$?" != "0" ] && packages="$packages libvte9";
which debootstrap >/dev/null;
[ "$?" != "0" ] && packages="$packages debootstrap";
which sshpass >/dev/null;
[ "$?" != "0" ] && packages="$packages sshpass";
which git >/dev/null;
[ "$?" != "0" ] && packages="$packages git";
which lighttpd > /dev/null
[ "$?" != "0" ] && packages="$packages lighttpd";
which svn >/dev/null;
[ "$?" != "0" ] && packages="$packages subversion";
which wget >/dev/null;
[ "$?" != "0" ] && packages="$packages wget";
which ruby >/dev/null;
[ "$?" != "0" ] && packages="$packages ruby";
which kdbg >/dev/null;
[ "$?" != "0" ] && packages="$packages kdbg";
which krusader >/dev/null;
[ "$?" != "0" ] && packages="$packages krusader";
which kate >/dev/null;
if [ "$?" != "0" ];then
{
  which gem >/dev/null;
  [ "$?" != "0" ] && packages="$packages kate" || TEXT_VIEVER="gedit";
} fi

if [ "${packages}" != "" ];then
{
  cat > $TEMP_DIR/build-dep-install.sh << EOF
#!/bin/bash

printf "Installing of build dependencies \"$packages\" is needed!\n\n"

sudo apt-get -y install ${packages}
EOF

  chmod +x $TEMP_DIR/build-dep-install.sh;
  run_in_terminal $TEMP_DIR/build-dep-install.sh;
  rm -f $TEMP_DIR/build-dep-install.sh;
} fi

# Warn if hd size is small
if [ `expr $FREE_INITIAL_DISK_SPACE / 1024 / 1024` -lt $DEFAULT_MIN_HD_SIZE ];then
{
  showWarningDialog_YesNo "\
Maybe not enough free space `expr $FREE_INITIAL_DISK_SPACE / 1024 / 1024` GByte available to use for all systems!Continue install?";
  [ $? != 0 ] && exit_build 1;
} fi

memory=`grep MemTotal /proc/meminfo | awk '{print $2}'`;
memory=`expr $memory / 1024`;
if [ $memory -lt $DEFAULT_MIN_MEM_SIZE ];then
{
  showWarningDialog_YesNo "\Maybe not enough memory with $memory MByte available to use for all systems!Continue install?";
  [ $? != 0 ] && exit_build 1;
} fi

if [ -z $MUPEL_DESKTOP_ICON_PATH ];then
  MUPEL_DESKTOP_ICON_PATH=$DESKTOP_DIR;fi

IFS=$'';
GIT_CONFIG=$(git config -l);
GIT_USERNAME_OLD=$(echo $GIT_CONFIG | grep user.name | awk -F 'user.name=' '{print $2}');
GIT_EMAIL_OLD=$(echo $GIT_CONFIG | grep user.email | awk -F 'user.email=' '{print $2}');
if [[ -z $GIT_USERNAME_OLD ]] || [[ -z $GIT_EMAIL_OLD ]];then
  GIT_NOT_SET=1;fi
unset IFS;